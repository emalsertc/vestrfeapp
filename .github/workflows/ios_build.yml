name: iOS CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-ios:
    runs-on: macos-13
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Install dependencies and sync
        run: |
          npm ci
          npm run build
          npx cap sync ios

      - name: Create xcconfig
        run: |
          cd ios/App
          echo "PROVISIONING_PROFILE_SPECIFIER=" > pods-signing.xcconfig
          echo "CODE_SIGN_STYLE=Automatic" >> pods-signing.xcconfig
          echo "DEVELOPMENT_TEAM=6U47BQY2H3" >> pods-signing.xcconfig
          echo "CODE_SIGN_IDENTITY=Apple Development" >> pods-signing.xcconfig

      - name: Install pods with config
        run: |
          cd ios/App
          pod install --project-directory=. --config=Release XCCONFIG=pods-signing.xcconfig

      - name: Update project settings
        run: |
          cd ios/App
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier fr.vestr.vestrapp" App/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion 1" App/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString 1.0.0" App/Info.plist

      - name: Build iOS
        env:
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
        run: |
          cd ios/App
          xcodebuild clean archive \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -archivePath $PWD/build/App.xcarchive \
            DEVELOPMENT_TEAM=6U47BQY2H3 \
            CODE_SIGN_IDENTITY="Apple Development" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="Eliot Iphone" \
            PRODUCT_BUNDLE_IDENTIFIER=fr.vestr.vestrapp \
            OTHER_CODE_SIGN_FLAGS="--keychain $RUNNER_TEMP/app-signing.keychain-db" \
            GCC_PREPROCESSOR_DEFINITIONS='${inherited} COCOAPODS=1'

      - name: Export IPA
        env:
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
        run: |
          xcodebuild -exportArchive \
            -archivePath ios/App/build/App.xcarchive \
            -exportOptionsPlist ios/exportOptions.plist \
            -exportPath $PWD/build \
            -allowProvisioningUpdates

      - name: Clean up keychain and provisioning profile
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: App-Release-IPA
          path: build/App.ipa 